name: CI

on:
  push:
    branches:
      - 'master'
    tags: [ 'v*' ]
  pull_request:
    branches:
      - 'master'

jobs:
  test:
    name: Test
    runs-on: ${{ '{{ matrix.platform.os }}' }}
    strategy:
      matrix:
        python_version: ['3.{{ range(min_python_version.split('.')[1]|int, (max_python_version.split('.')[1])|int + 1) | join('\', \'3.') }}']
        platform: [
          {
            os: 'macos-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-apple-darwin'
          },
          {
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-unknown-linux-gnu'
          },
          {
            os: 'windows-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-pc-windows-msvc'
          },
          {
            os: 'windows-latest',
            python_architecture: 'x86',
            rust_target: 'i686-pc-windows-msvc'
          },
        ]
        include:
          - python_version: 'pypy-{{ min_python_version.split('.')[:2] | join('.') }}'
            platform: { os: 'macos-latest', python_architecture: 'x64' }
          - python_version: 'pypy-{{ min_python_version.split('.')[:2] | join('.') }}'
            platform: { os: 'ubuntu-latest', python_architecture: 'x64' }
          - python_version: 'pypy-{{ min_python_version.split('.')[:2] | join('.') }}'
            platform: { os: 'windows-latest', python_architecture: 'x64' }
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Setup Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ '{{ matrix.python_version }}' }}
          architecture: ${{ '{{ matrix.platform.python_architecture }}' }}
      - name: 'Setup Rust'
        uses: actions-rs/toolchain@v1
        with:
          components: rustfmt
          default: true
          target: ${{ '{{ matrix.platform.rust_target }}' }}
          toolchain: nightly
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Run Rust linter'
        run: cargo fmt --check
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Install Python packaging tools'
        run: python -m pip install -U pip setuptools
      - name: 'Install Python type checker'
        run: python -m pip install -U mypy
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Install Python coverage dependencies'
        run: python -m pip install --upgrade coverage
      - name: 'Install Rust coverage dependencies'
        run: cargo install grcov
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Install in editable mode'
        run: python -m pip -v install -e .
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: >
            -Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off
            -Zpanic_abort_tests -Cpanic=abort
      - name: 'Run Python type checker'
        run: python -m mypy ${{ github.event.repository.name }}
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Install Python tests dependencies'
        run: python -m pip install -r requirements-tests.txt
      - name: 'Run Rust doctests'
        run: cargo test --doc --target=${{ '{{ matrix.platform.rust_target }}' }}
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: >
            -Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off
            -Zpanic_abort_tests
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Run Python doctests'
        run: >
          coverage run -m doctest README.md
          && coverage run --append -m pytest --doctest-modules --ignore=tests
      - name: 'Run tests'
        run: coverage run --append -m pytest
      - name: 'Collect coverage'
        run: coverage xml
      - name: 'Collect Rust coverage'
        run: grcov target -s . -t cobertura --llvm --branch --ignore-not-existing --ignore "/*" -o coverage_rust.xml
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
      - name: 'Upload PyPy coverage'
        uses: codecov/codecov-action@v2.1.0
        with:
          fail_ci_if_error: false
          files: ./coverage.xml
        if: ${{ '{{ startsWith(matrix.python_version, \'pypy\') }}' }}
        continue-on-error: true
      - name: 'Upload Ð¡Python coverage'
        uses: codecov/codecov-action@v2.1.0
        with:
          fail_ci_if_error: false
          files: ./coverage.xml,./coverage_rust.xml
        if: ${{ '{{ !startsWith(matrix.python_version, \'pypy\') }}' }}
        continue-on-error: true

  pre-deploy:
    name: 'Pre-deploy'
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref_type == 'tag'
    steps:
      - name: '_'
        run: echo "Pre-deploy step"

  deploy-crates-io:
    name: 'Deploy to crates.io'
    environment: release
    needs: pre-deploy
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
      - name: 'Setup Rust'
        uses: actions-rs/toolchain@v1
        with:
          default: true
          toolchain: nightly
      - name: 'Upload'
        run: cargo publish --no-verify
        env:
          CARGO_REGISTRY_TOKEN: ${{ '{{ secrets.CARGO_REGISTRY_TOKEN }}' }}

  build-sdist:
    name: 'Build sdist'
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Setup Python'
        uses: actions/setup-python@v3
      - name: 'Install packaging tools'
        run: python -m pip install -U build pip setuptools
      - name: 'Build sdist'
        run: python -m build --sdist
      - name: 'Upload sdist'
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: dist

  build-wheels:
    name: 'Build wheels'
    runs-on: ${{ '{{ matrix.platform.os }}' }}
    needs: pre-deploy
    strategy:
      matrix:
        platform: [
          {
            archs: 'arm64 universal2',
            builds: '*-macosx_arm64 *-macosx_universal2',
            os: 'macos-latest',
            python_architecture: 'x64',
            rust_target: 'aarch64-apple-darwin'
          },
          {
            archs: 'x86_64',
            builds: '*-macosx_x86_64',
            os: 'macos-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-apple-darwin'
          },
          {
            archs: 'aarch64',
            builds: '*-manylinux_aarch64',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'aarch64-unknown-linux-gnu'
          },
          {
            archs: 'aarch64',
            builds: '*-musllinux_aarch64',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'aarch64-unknown-linux-musl'
          },
          {
            archs: 'i686',
            builds: '*-manylinux_i686',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'i686-unknown-linux-gnu'
          },
          {
            archs: 'ppc64le',
            builds: '*-manylinux_ppc64le',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'powerpc64le-unknown-linux-gnu'
          },
          {
            archs: 's390x',
            builds: '*-manylinux_s390x',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 's390x-unknown-linux-gnu'
          },
          {
            archs: 'x86_64',
            builds: '*-manylinux_x86_64',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-unknown-linux-gnu'
          },
          {
            archs: 'x86_64',
            builds: '*-musllinux_x86_64',
            os: 'ubuntu-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-unknown-linux-musl'
          },
          {
            archs: 'AMD64',
            builds: '*-win_amd64',
            os: 'windows-latest',
            python_architecture: 'x64',
            rust_target: 'x86_64-pc-windows-msvc'
          },
          {
            archs: 'x86',
            builds: '*-win32',
            os: 'windows-latest',
            python_architecture: 'x86',
            rust_target: 'i686-pc-windows-msvc'
          },
        ]
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Setup Python'
        uses: actions/setup-python@v3
        with:
          architecture: ${{ '{{ matrix.platform.python_architecture }}' }}
      - name: 'Setup Rust'
        uses: actions-rs/toolchain@v1
        with:
          default: true
          target: ${{ '{{ matrix.platform.rust_target }}' }}
          toolchain: nightly
        if: ${{ '{{ runner.os != \'Linux\' }}' }}
      - name: 'Setup QEMU'
        uses: docker/setup-qemu-action@v1
        with:
          platforms: all
        if: ${{ runner.os == 'Linux' }}
      - name: 'Build wheels'
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CIBW_ARCHS: ${{ '{{ matrix.platform.archs }}' }}
          CIBW_BEFORE_ALL_LINUX: >
            curl https://sh.rustup.rs -sSf
            | sh -s -- -y --default-toolchain=nightly
          CIBW_BUILD: ${{ '{{ matrix.platform.builds }}' }}
          CIBW_BUILD_VERBOSITY: 1
          CIBW_ENVIRONMENT_LINUX: PATH="$HOME/.cargo/bin:$PATH"
          CIBW_SKIP: pp*
      - name: 'Upload wheels'
        uses: actions/upload-artifact@v2
        with:
          name: dist
          path: wheelhouse/*.whl

  test-distributions:
    name: Test distributions
    runs-on: ${{ '{{ matrix.platform.os }}' }}
    needs: ['build-sdist', 'build-wheels']
    strategy:
      matrix:
        python_version: ['3.{{ range(min_python_version.split('.')[1]|int, (max_python_version.split('.')[1])|int + 1) | join('\', \'3.') }}']
        platform: [
          {
            os: 'macos-latest',
            python_architecture: 'x64'
          },
          {
            os: 'ubuntu-latest',
            python_architecture: 'x64'
          },
          {
            os: 'windows-latest',
            python_architecture: 'x64'
          },
          {
            os: 'windows-latest',
            python_architecture: 'x86'
          },
        ]
        include:
          - python_version: 'pypy-{{ min_python_version.split('.')[:2] | join('.') }}'
            platform: { os: 'macos-latest', python_architecture: 'x64' }
          - python_version: 'pypy-{{ min_python_version.split('.')[:2] | join('.') }}'
            platform: { os: 'ubuntu-latest', python_architecture: 'x64' }
          - python_version: 'pypy-{{ min_python_version.split('.')[:2] | join('.') }}'
            platform: { os: 'windows-latest', python_architecture: 'x64' }
    steps:
      - name: 'Setup Python'
        uses: actions/setup-python@v2
        with:
          python-version: ${{ '{{ matrix.python_version }}' }}
          architecture: ${{ '{{ matrix.platform.python_architecture }}' }}
      - name: 'Download distributions'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Install from distributions'
        run: python -m pip install --find-links=dist --no-deps --no-index ${{ '{{ github.event.repository.name }}' }}

  deploy-pypi:
    name: 'Deploy to PyPI'
    environment: release
    needs: test-distributions
    runs-on: ubuntu-latest
    steps:
      - name: 'Download distributions'
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: 'Upload'
        uses: pypa/gh-action-pypi-publish@v1.5.0
        with:
          packages_dir: dist
          password: ${{ '{{ secrets.PYPI_API_TOKEN }}' }}
