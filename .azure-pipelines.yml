trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

strategy:
  matrix:
{% for os, architectures_with_rust_targets in [('MacOs', [('x64', 'x86_64-apple-darwin')]), ('Ubuntu', [('x64', 'x86_64-unknown-linux-gnu')]), ('Windows', [('x86', 'i686-pc-windows-msvc'), ('x64', 'x86_64-pc-windows-msvc')])] %}
{% for minor in range(min_python_version.split(".")[1]|int, (max_python_version.split(".")[1])|int + 1) %}
{% for architecture, rust_target in architectures_with_rust_targets %}
    {{os}} CPython3.{{minor}}{{" (%s)" % architecture if architectures|length > 1 else ""}}:
      image: '{{os|lower}}-latest'
      python.version: '3.{{minor}}'
      python.architecture: '{{architecture}}'
      rust.target: '{{rust_target}}'
{% endfor %}
{% endfor %}
    {{os}} PyPy3:
      image: '{{os|lower}}-latest'
      python.version: 'pypy3'
      python.architecture: '{{architectures_with_rust_targets[0][0]}}'
{% endfor %}

pool:
  vmImage: $(image)

steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: '$(python.architecture)'
  - bash: rustup target install $RUST_TARGET
    displayName: 'Install Rust compilation target'
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
  - bash: python -m pip install --upgrade pip setuptools
    displayName: 'Install packaging tools'
  - bash: python setup.py develop
    displayName: 'Install in editable mode'
    env:
      CARGO_INCREMENTAL: 0
      RUSTFLAGS: -Zprofile -Ccodegen-units=1 -Copt-level=0 -Coverflow-checks=off -Zpanic_abort_tests -Cpanic=abort
  - bash: python -m pip install --upgrade coverage codecov
    displayName: 'Install coverage dependencies'
  - bash: coverage run -m doctest README.md
    displayName: 'Run doctests'
  - bash: python -m pip install -r requirements-tests.txt
    displayName: 'Install tests dependencies'
  - bash: coverage run --append -m pytest
    displayName: 'Run tests'
  - bash: coverage xml
    displayName: 'Collect coverage'
  - bash: python -m codecov -f coverage.xml -X gcov --build "$AGENT_JOBNAME"
    condition: succeeded()
    displayName: 'Upload coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - bash: cargo install grcov
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
    displayName: 'Install Rust coverage dependencies'
  - bash: grcov target -s . -t cobertura --llvm --branch --ignore-not-existing --ignore "/*" -o coverage_rust.xml
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
    displayName: 'Collect Rust coverage'
  - bash: python -m codecov -f coverage_rust.xml -X gcov --build "$AGENT_JOBNAME"
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'))
    displayName: 'Upload Rust coverage'
    env:
      CODECOV_TOKEN: $(CODECOV_TOKEN)
  - bash: python -m pip install --upgrade cibuildwheel
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install build dependencies'
  - bash: rm $(python -c 'import glob;from importlib.machinery import EXTENSION_SUFFIXES; print(*set(sum([glob.glob("**/*{}".format(suffix)) for suffix in EXTENSION_SUFFIXES], [])), end="")')
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Pre-build'
  - bash: python setup.py sdist
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build source distribution'
  - bash:
      CIBW_BUILD=$(python -c 'import sys; print("cp" + "".join(map(str, sys.version_info[:2])) + "-*")')
      cibuildwheel --output-dir dist
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Build wheels'
    env:
      CIBW_ARCHS: native
      CIBW_BEFORE_ALL: curl https://sh.rustup.rs -sSf | sh -s -- -y && PATH="$HOME/.cargo/bin$(python -c 'import os; print(os.pathsep, end="")')$PATH" rustup target install $(rust.target)
      CIBW_ENVIRONMENT: PATH="$HOME/.cargo/bin$(python -c 'import os; print(os.pathsep, end="")')$PATH"
  - bash: python -m pip install --upgrade twine
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Install deploy dependencies'
  - bash: twine upload --skip-existing dist/*
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Deploy Python'
    env:
      TWINE_USERNAME: __token__
      TWINE_PASSWORD: $(TWINE_PASSWORD)
  - bash: cargo publish --no-verify | true
    condition: and(succeeded(), startsWith(variables['python.version'], '3.'), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    displayName: 'Deploy Rust'
    env:
      CARGO_REGISTRY_TOKEN: $(CARGO_REGISTRY_TOKEN)
